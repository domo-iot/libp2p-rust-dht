name: deploy

on:
  push:
    tags:
      - 'v*.*.*'

jobs:

  create-ubuntu-binary:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install protobuf compiler
      run: |
        sudo apt-get update
        sudo apt-get install protobuf-compiler

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        target: x86_64-unknown-linux-musl

    - name: Install musl
      if: contains(matrix.target, 'linux-musl')
      run: |
        sudo apt-get install musl-tools

    - name: Build libp2p-rust-dht
      run: |
        # TODO: Remember to add RUSTFLAGS=+crt-static for musl target when
        # static linkage will not be the default behaviour
        cargo build --release --target x86_64-unknown-linux-musl

    - name: Strip binary
      run: |
        strip target/x86_64-unknown-linux-musl/release/libp2p-rust-dht

    - name: Get the version
      id: tagName
      run: |
        VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
        echo "tag=$VERSION" >> $GITHUB_OUTPUT

    - name: Build package
      id: package
      run: |
        TAR_FILE=libp2p-rust-dht-${{ steps.tagName.outputs.tag }}-x86_64-unknown-linux-musl
        cd target/x86_64-unknown-linux-musl/release
        tar -czvf $GITHUB_WORKSPACE/$TAR_FILE.tar.gz libp2p-rust-dht
        echo "name=$TAR_FILE" >> $GITHUB_OUTPUT
        echo "file=$TAR_FILE.tar.gz" >> $GITHUB_OUTPUT

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.package.outputs.name }}
        path: ${{ steps.package.outputs.file }}


  deploy:

    needs: create-ubuntu-binary

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Create Cargo.lock
        run: |
          cargo update

      - name: Get version
        id: tagName
        run: |
          VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
          echo "tag=$VERSION" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: ./binaries

      - name: Create a release
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ steps.tagName.outputs.tag }}
          files: |
            ./binaries/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
